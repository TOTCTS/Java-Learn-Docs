---
description: 
globs: 
alwaysApply: true
---
# Cursor 规则

## 项目功能描述
- 这是一份深入学习Java的纯文档项目
- 这份文档主要面向Java初学者、Java开发人员、资深开发人员
- 内容将涵盖以下主要技术栈：
  - **核心语言:** Java (JVM, 并发编程, 集合框架)
  - **主流框架:** Spring, Spring Boot, Spring Cloud, Spring MVC, MyBatis, Netty
  - **数据库技术:** MySQL, PostgreSQL, Redis, MongoDB
  - **消息队列 (MQ):** RabbitMQ, Kafka
  - **搜索引擎:** Elasticsearch
  - **容器化与微服务:** Docker, Kubernetes (K8s), 微服务架构
  - **工程化与DevOps:** Maven, Gradle, Git, Jenkins

## 项目结构
- 所有文档源文件应存放在 `docs` 目录下。
- 文档根据技术类别创建子目录，例如：`docs/java/`, `docs/spring/`。

## 文件命名规范
- 所有 Markdown 文件和目录名应使用全小写英文字母。
- 单词之间使用短横线 (`-`) 连接，例如：`spring-boot-quick-start.md`。

## 行文风格与措辞
- 内容需面向不同水平的读者（初学者、资深开发者）。
- 面向初学者的内容应通俗易懂，避免生僻术语。
- 面向资深开发者的内容应保持技术深度、专业性和严谨性。 
- **技术阐述的严谨性**: 在【详细讲解】、【案例分析】等需要深入技术细节的章节中，应优先使用**严谨、客观、过程导向**的标题和术语。避免使用过于文学化、戏剧化或拟人化的比喻（例如“舞台剧”、“序幕”），以确保技术描述的专业性和清晰度。标题和内容应直接反映技术过程本身。

## 文档要求
- 使用 Markdown (`.md`) 作为主要文档格式。
- 采用静态网站生成器 (Static Site Generator) 进行构建和发布。
- 文档需支持通过 SVG 图表生成流程图、时序图等。
- 最终生成的文档网站应具备美观的样式和良好的阅读体验。 
- 文档组成结构为大纲，大纲中涉及很多知识点，每个知识点对应新开一份文档专门描述
- **最终布局要求**：尽管创作过程遵循“先内容后图表”的原则，但最终面向读者的文章布局应将**核心架构图或高级概览图置于文章开篇位置**。这有助于读者第一时间建立对主题的宏观理解。其他如流程图、时序图等更具体的图表，应嵌入到其对应的详细讲解段落中，与上下文紧密结合。

## 知识点输出要求

### 内容创作流程 (Content-First Approach)
**核心原则**: 坚持"**先内容后图表**"的创作流程，确保图表真正服务于内容理解，而非为了图表而图表。

#### 第一阶段：内容创作
1. **完整编写文字内容**: 首先完成【核心讲解】和【详细讲解】的全部文字内容
2. **识别图表需求**: 在文字内容完成后，识别哪些概念、流程、架构需要图表支持
3. **确定图表类型**: 根据内容特点选择最合适的图表类型：
   - **架构概览**: 使用**系统架构图**展示整体结构和组件关系
   - **原理机制**: 使用**原理图**展示内部工作机制和数据流向
   - **动态过程**: 使用**流程图**或**时序图**展示步骤和时间线
   - **对比分析**: 使用**对比图**展示不同技术的优劣势
   - **层次结构**: 使用**分层图**展示技术栈或组件层次

#### 第二阶段：图表设计与制作
1. **图表内容设计**: 基于已完成的文字内容，设计图表的具体内容和布局
2. **深度信息整合**: 图表不仅要**直观展示**，更要**深度解析**：
   - **技术细节标注**: 在图表中直接标注关键技术参数、算法复杂度等
   - **交互关系说明**: 清晰标示组件间的调用关系、数据传递方式
   - **性能指标展示**: 在适当位置标注性能数据、瓶颈点等关键信息
   - **故障点标识**: 标出容易出现问题的节点和常见故障类型
3. **图表制作**: 严格按照SVG规范制作高质量图表

#### 第三阶段：图文整合与优化
1. **图文对应检查**: 确保每个图表都与对应的文字内容**完美契合**
2. **信息一致性验证**: 图表中的信息必须与文字描述**完全一致**，避免矛盾
3. **补充说明**: 为复杂图表提供详细的**图表说明**，解释图中的关键元素

### 图表深度要求 (Deep Visual Analysis)
**目标**: 图表不仅要"好看"，更要"深刻"，能够承载和传递复杂的技术信息。

#### 信息密度要求
- **技术参数集成**: 图表中应包含关键的技术参数，如内存大小、线程数量、超时时间等
- **性能数据标注**: 在适当位置标注性能基准、吞吐量、延迟等关键指标
- **配置信息展示**: 展示重要的配置参数和调优建议
- **版本演进信息**: 对于有版本差异的技术，在图表中标注版本特性

#### 深度分析要求
- **内部机制可视化**: 不仅展示"是什么"，更要展示"怎么工作"
- **数据流向精确化**: 清晰标示数据的完整流转路径和处理步骤
- **异常处理可视化**: 在流程图中标出异常分支和处理机制
- **优化点标识**: 标出性能优化的关键节点和优化策略

### 图表更新与维护机制 (Chart Maintenance Protocol)
**原则**: 内容与图表必须保持同步，任何重要更新都要评估图表的更新需求。

#### 更新触发条件
当发生以下情况时，**必须**检查并考虑更新相关图表：
1. **核心概念修改**: 技术定义、工作原理发生变化
2. **架构调整**: 系统架构、组件关系发生变更
3. **流程优化**: 处理流程、算法逻辑发生改进
4. **参数变更**: 重要参数的默认值、推荐值发生变化
5. **版本升级**: 涉及的技术版本发生重大升级
6. **性能数据更新**: 性能基准、测试数据发生显著变化

#### 更新评估流程
1. **影响范围评估**: 确定内容变更对现有图表的影响程度
2. **更新必要性判断**: 评估是否需要更新图表，还是仅需调整说明文字
3. **更新优先级排序**: 根据图表的重要性和影响范围确定更新顺序
4. **更新实施**: 按照SVG规范重新制作或修改图表
5. **一致性验证**: 确保更新后的图表与文字内容完全一致

#### 版本控制要求
- **图表版本标识**: 重要图表应在SVG注释中标注版本和更新日期
- **变更日志**: 记录图表的主要变更内容和原因
- **回滚机制**: 保留重要图表的历史版本，以便必要时回滚

### 图文协同质量标准 (Content-Visual Synergy Standards)
#### 一致性要求
- **术语统一**: 图表中使用的术语必须与文字内容完全一致
- **数据一致**: 图表中的数值、参数必须与文字描述匹配
- **逻辑一致**: 图表展示的逻辑关系必须与文字阐述的逻辑一致

#### 互补性要求
- **信息互补**: 图表提供文字难以表达的直观信息，文字提供图表无法承载的深度分析
- **细节互补**: 图表展示宏观结构，文字深入微观细节
- **角度互补**: 图表从空间角度展示，文字从时间和逻辑角度阐述

### 各模块编写规范

#### 【核心讲解】编写要求
**目标**: 建立读者对知识点的**本质认知**和**必要性理解**，回答"是什么"和"为什么需要"的问题。

**内容结构**:
1. **本质定义**: 用1-2句话精准定义技术的本质，避免循环定义和模糊表述
2. **核心价值**: 明确指出该技术解决的**根本问题**和**核心痛点**
3. **设计初衷**: 简述该技术诞生的**历史背景**和**设计哲学**
4. **关键特征**: 列出2-3个最重要的**区别性特征**，使其与相似技术区分开来

**编写原则**:
- **避免术语堆砌**: 每个专业术语都要有简洁的解释或类比
- **突出核心矛盾**: 重点说明该技术要解决的**核心矛盾**或**权衡取舍**
- **建立认知锚点**: 通过类比或对比，帮助读者建立**直观理解**

#### 【详细讲解】编写要求
**目标**: 深入剖析技术的**内部机制**、**实现原理**和**应用边界**，回答"怎么做"和"什么时候用"的问题。

**内容结构**:
1. **技术架构深度解析**:
   - **分层架构**: 详细说明各层次的职责和交互方式
   - **核心组件**: 深入分析关键组件的**内部实现**和**协作机制**
   - **数据流向**: 清晰描述数据在系统中的**完整流转路径**
   - **状态管理**: 解释系统如何管理和维护各种状态

2. **关键算法与数据结构**:
   - **算法选择**: 说明为什么选择特定算法，**时间复杂度**和**空间复杂度**分析
   - **数据结构设计**: 解释核心数据结构的**设计理念**和**优化策略**
   - **性能特征**: 分析在不同场景下的**性能表现**和**瓶颈点**

3. **实现细节与技术决策**:
   - **关键参数**: 详细解释重要参数的**含义**、**默认值**和**调优策略**
   - **异常处理**: 说明各种异常情况的**处理机制**和**恢复策略**
   - **并发安全**: 分析**线程安全性**和**并发控制机制**
   - **内存管理**: 解释**内存分配**、**垃圾回收**等内存相关的处理

4. **关联技术深度整合**:
   - **上下游依赖**: 详细说明与**前置技术**和**后续技术**的**集成方式**
   - **技术栈协同**: 解释在完整技术栈中的**定位**和**协作关系**
   - **替代方案对比**: 与**同类技术**进行**深度对比**，分析**优劣势**和**适用场景**
   - **演进路径**: 说明技术的**发展历程**和**未来趋势**

5. **生产环境考量**:
   - **性能优化**: 提供**具体的优化策略**和**最佳实践**
   - **监控指标**: 列出**关键监控指标**和**异常诊断方法**
   - **故障处理**: 说明**常见故障**的**根因分析**和**解决方案**
   - **扩展性设计**: 分析**水平扩展**和**垂直扩展**的策略

**编写原则**:
- **机制优于现象**: 重点解释**内部机制**，而不是表面现象
- **原理优于操作**: 深入**底层原理**，而不是简单的操作步骤
- **系统性思维**: 将知识点放在**整个技术体系**中进行阐述
- **实战导向**: 结合**真实场景**和**生产环境**的考量
- **关联性强化**: 主动建立与**相关技术**的**深层联系**
- **量化优先原则**: 在进行技术阐述时，**优先（Prioritize）** 使用具体、量化的数据来支撑观点，尤其是在对比性能、解释资源限制或描述默认配置时。这是一种优秀的写作风格，但不是强制要求。

#### 【生产实践深度】原则
- **适用场景**: 当讲解的知识点与**系统性能、资源管理、架构设计、并发控制或故障排查**强相关时（例如：JVM内存模型、GC算法、线程池、数据库连接池、消息队列等）。
- **编写要求**: 在上述场景下，**强烈推荐（Highly Recommended）** 文档中包含深入的实践指导内容。这可以是一个独立的章节（如 `### 生产实践考量`），也可以融入在【详细讲解】的各个部分。内容应力求覆盖：
    1.  **关键配置 (Key Configurations)**: 解释核心调优参数及其对系统行为的影响。
    2.  **监控指标 (Monitoring Metrics)**: 提供关键的监控项和告警阈值建议。
    3.  **常见陷阱与解决方案 (Common Pitfalls & Solutions)**: 分析典型的线上问题、诊断思路和解决方案。
- **目的**: 确保在需要深度的领域提供足够的实践价值，同时避免在基础语法等不相关的知识点上增加不必要的复杂性。

#### 【演进与对比】分析规范
- **适用场景**: 当讲解的技术点是另一项技术的**重要演进、替代品或存在明确竞争关系**的方案时（例如：元空间 vs. 永久代, G1 vs. CMS, gRPC vs. RESTful API）。
- **编写要求**: 在此场景下，进行深度对比分析是**必要的**。强烈推荐使用表格形式，从多维度进行结构化对比。
- **目的**: 确保在关键的技术选型和历史演进部分，为读者提供最清晰的决策依据。

#### 【关联知识点处理规范】
当涉及重要的关联知识点时，必须包含以下内容：

1. **关联性质说明**: 明确两个技术之间是**依赖关系**、**互补关系**还是**竞争关系**
2. **交互界面分析**: 详细说明两个技术在**接口层面**的**交互方式**和**数据交换格式**
3. **协同工作机制**: 解释两个技术如何**协同工作**，各自承担什么**职责**
4. **集成复杂度**: 分析集成的**技术难点**和**常见问题**
5. **性能影响**: 说明关联技术对**整体性能**的**影响**和**优化策略**

#### 【案例分析】编写要求
**目标**: 通过具体的、可落地的场景，将抽象的技术概念转化为实际的应用实践。

**内容结构**:
1. **场景背景**: 描述一个真实的业务场景或技术问题
2. **问题分析**: 分析场景中涉及的技术挑战和关键问题
3. **解决方案**: 详细说明如何运用所学知识解决问题
4. **实施细节**: 提供具体的实施步骤和关键决策点
5. **效果评估**: 分析解决方案的效果和可能的改进空间

**设计原则**:
- **系统性案例**: **鼓励（Encourage）** 采用系统性、端到端的视角，特别是对于**流程性或协作性强**的知识点（如请求处理链路、对象生命周期、事务提交流程等）。对于单一、孤立的知识点，一个简洁明了的小示例即可。

**图表配合要求**:
- **流程图配合**: 对于复杂的处理流程，必须配合**流程图**进行可视化展示
- **架构图配合**: 对于系统架构相关的案例，必须提供**架构图**展示组件关系
- **时序图配合**: 对于涉及多个系统交互的场景，必须提供**时序图**展示交互过程
- **数据流图配合**: 对于数据处理相关的案例，必须提供**数据流图**展示数据流转

#### 【代码示例】编写要求
**目标**: 提供完整、可运行的代码，帮助读者将理论知识转化为实践能力。

**内容结构**:
1. **示例目标**: 明确代码示例要演示的技术点
2. **环境准备**: 说明运行代码所需的环境和依赖
3. **核心代码**: 提供完整的、可运行的代码
4. **关键注释**: 为关键代码行提供详细的注释说明
5. **运行结果**: 展示代码的运行结果和输出
6. **扩展思考**: 提供进一步的思考和改进建议

**图表配合要求**:
- **内存分配图**: 对于涉及内存操作的代码，提供**内存分配图**展示内存状态变化
- **执行流程图**: 对于复杂的算法代码，提供**执行流程图**展示算法执行步骤
- **对象关系图**: 对于面向对象的代码，提供**对象关系图**展示类之间的关系
- **性能对比图**: 对于性能相关的代码，提供**性能对比图**展示不同实现的性能差异

### 实施指导原则
#### 创作顺序强制要求
1. **第一步**: 完成所有文字内容（【核心讲解】、【详细讲解】、【案例分析】、【代码示例】）
2. **第二步**: 基于完成的文字内容，识别需要图表支持的具体内容点
3. **第三步**: 设计图表的具体内容、布局和技术细节
4. **第四步**: 制作高质量的SVG图表
5. **第五步**: 将图表与文字内容进行整合和优化

#### 质量检查清单
- [ ] 文字内容是否完整且深入？
- [ ] 图表需求是否已准确识别？
- [ ] 图表类型选择是否合适？
- [ ] 图表信息密度是否足够？
- [ ] 图表与文字内容是否一致？
- [ ] 图表是否能独立传达核心信息？
- [ ] 是否需要更新现有图表？

## 资源文件组织规范 (Asset Organization)
- **目标**: 确保所有资源文件（如图表、图片等）的存储路径与其关联的 Markdown 文档路径保持一致，便于管理和维护。
- **存储规则**:
    - 所有 SVG 图表、图片等资源文件，必须存放在 `docs/public/assets/` 目录下。
    - 在 `assets` 目录下，应创建与 `docs` 目录中 Markdown 文件相对应的子目录结构。
- **示例**:
    - **文档路径**: `docs/java/jvm/jvm-memory-structure.md`
    - **对应资源路径**: `docs/public/assets/java/jvm/jvm-memory-structure-diagram.svg`
- **引用规则**: 在 Markdown 文件中引用资源时，应使用相对于 `public` 目录的根路径，例如 `/assets/java/jvm/your-diagram.svg`。

## 最终审查与修正流程 (Final Review & Refinement Process)
- **核心原则**: 文档初稿完成后，必须进行一次**最终审查**，以确保完全遵循本文档中定义的所有规范。
- **审查流程**:
    1.  **文档完成**: 完成【核心讲解】、【详细讲解】、【案例分析】、【代码示例】等所有内容的初步编写。
    2.  **规则自查**: 对照 `.cursor/rules/docs.mdc` 中的每一条规则，系统性地检查文档内容。
        - **结构与命名**: 检查文件和目录命名是否符合规范。
        - **内容深度**: 检查【核心讲解】、【详细讲解】等部分是否达到深度要求。
        - **图表质量**: 检查图表是否符合 SVG 规范，信息密度是否足够，与内容是否一致。
        - **资源组织**: 检查图表等资源文件路径是否符合组织规范。
        - **行文风格**: 检查措辞是否符合面向读者的要求。
    3.  **修正与优化**: 根据自查结果，对文档进行必要的修正和优化，直到完全符合规范。
- **目的**: 将质量保证内置于创作流程中，确保每一篇文档都达到项目的高标准。

## 技术栈与工具
- 使用 VitePress 作为静态网站生成器
- 使用 SVG 图表生成图表
- 使用 Vue 3 组件增强交互体验
- 支持响应式设计，适配移动端阅读

## 开发规范
- 所有代码应遵循 ES6+ 标准
- Vue 组件使用 Composition API
- 样式使用 CSS3 和现代布局技术
- 确保组件的可复用性和可维护性 

## SVG 图表规范
- **黄金标准参考 (Golden Standard Reference)**: **`docs/public/assets/java/jvm/jvm-memory-structure-diagram.svg`** 被确立为本项目所有图表设计的“黄金标准”。所有新图表在视觉风格、布局逻辑、信息密度和美学细节上，都应以此为目标进行看齐。

- **核心设计原则 (Core Design Principles)**:
  - **逻辑分区 (Zoning & Grouping)**: 优先使用大型、带有浅色透明背景的面板来对顶层概念进行逻辑分区 (例如，线程共享区 vs. 私有区)。这有助于建立图表的宏观结构。
  - **视觉层次 (Visual Hierarchy)**: 通过嵌套和样式变化来明确信息层级。
    - **主区域**: 使用带有实线边框和微妙渐变的面板。
    - **子区域**: 在主区域内使用带有虚线边框的面板来表示其组成部分。
    - **具体条目**: 在子区域内使用更小的、无边框或细边框的矩形来展示具体信息点。
  - **结构化表达**: 列表式信息应使用结构化的图形元素（如带有项目符号或编号的左对齐列表）呈现，避免简单的多行居中文字。
  - **简洁性**: 避免在图表内使用与文档标题重复的标题性文字，让图表专注于核心信息。
  - **视觉间距 (Breathing Room)**: 保证所有元素之间有足够的视觉间距，避免拥挤和重叠。

- **色彩与风格体系 (Color & Style System)**:
  - **推荐调色板 (Recommended Palettes)**:
    - **核心/数据区 (如 Heap)**: 暖色调渐变，如 `#FFDDC1` -> `#FFC3A0`。
    - **执行/逻辑区 (如 Stack)**: 冷色调渐变，如 `#D4F1F4` -> `#A9D3E0`。
    - **元数据/定义区 (如 Metaspace)**: 中性色调渐变，如 `#EAEAEA` -> `#DCDCDC`。
    - **顶层分区背景**: 使用半透明的浅色，如 `rgba(255, 248, 225, 0.5)` (淡奶油) 或 `rgba(225, 245, 254, 0.5)` (淡青)。
  - **字体**: 使用 `Inter` 或 `Arial` 等无衬线字体。通过字重 (font-weight) 和字号 (font-size) 来区分标题、副标题和正文。

- **兼容性与编写规范 (Compatibility & Authoring Standards)**:
  - **兼容性**: SVG 图表应在所有现代浏览器和平台（GitHub, VitePress）上正常显示。
  - **严谨性优先**: 手动编写 SVG 时，必须符合 W3C 规范。
  - **ID 唯一性**: 同一 SVG 文件中，所有 `id` 属性必须唯一。
  - **XML 实体编码**: `<text>` 标签中的特殊字符必须转义 (e.g., `<` 写作 `&lt;`)。
  - **浏览器验证**: 每次修改后，必须在浏览器中直接打开 SVG 文件进行渲染验证。 