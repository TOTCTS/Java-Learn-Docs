import{_ as a,c as o,o as l,ah as i}from"./chunks/framework.CY4BpP3U.js";const v=JSON.parse('{"title":"Java 知识体系大纲","description":"","frontmatter":{},"headers":[],"relativePath":"java/introduction.md","filePath":"java/introduction.md"}'),c={name:"java/introduction.md"};function d(t,e,r,n,h,u){return l(),o("div",null,e[0]||(e[0]=[i('<h1 id="java-知识体系大纲" tabindex="-1">Java 知识体系大纲 <a class="header-anchor" href="#java-知识体系大纲" aria-label="Permalink to &quot;Java 知识体系大纲&quot;">​</a></h1><p>欢迎来到 Java 的世界！本大纲旨在为您提供一个纯粹的、深入的 Java 语言学习路径，涵盖从核心基础到并发编程、虚拟机底层和最新特性的完整知识体系。</p><p>您可以将此视为您的学习地图，每个知识点未来都将链接到一篇详细的文档。</p><hr><h2 id="一、-java-核心基础" tabindex="-1">一、 Java 核心基础 <a class="header-anchor" href="#一、-java-核心基础" aria-label="Permalink to &quot;一、 Java 核心基础&quot;">​</a></h2><p>这一部分是所有 Java 开发者的基石，无论技术如何变迁，扎实的基础永远是核心竞争力。</p><h3 id="_1-1-环境与入门" tabindex="-1">1.1 环境与入门 <a class="header-anchor" href="#_1-1-环境与入门" aria-label="Permalink to &quot;1.1 环境与入门&quot;">​</a></h3><ul><li>[ ] JDK 的安装与配置 (Windows/Mac/Linux)</li><li>[ ] 编写并运行第一个 Java 程序 (Hello World)</li><li>[ ] 理解 <code>javac</code> 和 <code>java</code> 命令</li><li>[ ] 使用 IDE (IntelliJ IDEA)</li></ul><h3 id="_1-2-语言基础" tabindex="-1">1.2 语言基础 <a class="header-anchor" href="#_1-2-语言基础" aria-label="Permalink to &quot;1.2 语言基础&quot;">​</a></h3><ul><li>[ ] 数据类型 (基本类型与引用类型)</li><li>[ ] 运算符</li><li>[ ] 控制流程 (if-else, switch, for, while)</li><li>[ ] 数组</li></ul><h3 id="_1-3-面向对象-oop" tabindex="-1">1.3 面向对象 (OOP) <a class="header-anchor" href="#_1-3-面向对象-oop" aria-label="Permalink to &quot;1.3 面向对象 (OOP)&quot;">​</a></h3><ul><li>[ ] 类与对象</li><li>[ ] 封装、继承、多态</li><li>[ ] <code>abstract</code> 类与 <code>interface</code> 接口</li><li>[ ] <code>static</code> 与 <code>final</code> 关键字</li><li>[ ] <code>Object</code> 类常用方法 (<code>equals</code>, <code>hashCode</code>, <code>toString</code>)</li></ul><h3 id="_1-4-核心-api" tabindex="-1">1.4 核心 API <a class="header-anchor" href="#_1-4-核心-api" aria-label="Permalink to &quot;1.4 核心 API&quot;">​</a></h3><ul><li>[ ] <code>String</code>, <code>StringBuilder</code>, <code>StringBuffer</code></li><li>[ ] 常用工具类 (<code>Math</code>, <code>Date</code>, <code>Calendar</code>)</li><li>[ ] 包装类</li><li>[ ] 异常处理 (<code>try-catch-finally</code>, <code>throw</code>, <code>throws</code>)</li><li>[ ] 泛型</li><li>[ ] I/O 流 (File, InputStream/OutputStream, Reader/Writer)</li><li>[ ] 反射 (Reflection)</li></ul><h3 id="_1-5-集合框架-collections" tabindex="-1">1.5 集合框架 (Collections) <a class="header-anchor" href="#_1-5-集合框架-collections" aria-label="Permalink to &quot;1.5 集合框架 (Collections)&quot;">​</a></h3><ul><li>[ ] <code>Collection</code> 与 <code>Map</code> 接口</li><li>[ ] <code>List</code>: <code>ArrayList</code>, <code>LinkedList</code> 源码与对比</li><li>[ ] <code>Set</code>: <code>HashSet</code>, <code>TreeSet</code> 源码与对比</li><li>[ ] <code>Map</code>: <code>HashMap</code>, <code>ConcurrentHashMap</code>, <code>TreeMap</code> 源码与对比</li><li>[ ] <code>Collections</code> 工具类</li></ul><hr><h2 id="二、-java-进阶核心" tabindex="-1">二、 Java 进阶核心 <a class="header-anchor" href="#二、-java-进阶核心" aria-label="Permalink to &quot;二、 Java 进阶核心&quot;">​</a></h2><p>掌握了基础后，需要深入理解 Java 的底层机制，这是从“会用”到“精通”的关键一步。</p><h3 id="_2-1-并发编程-concurrency" tabindex="-1">2.1 并发编程 (Concurrency) <a class="header-anchor" href="#_2-1-并发编程-concurrency" aria-label="Permalink to &quot;2.1 并发编程 (Concurrency)&quot;">​</a></h3><ul><li>[ ] 线程基础 (创建线程, 线程状态, <code>sleep</code>, <code>yield</code>, <code>join</code>)</li><li>[ ] <code>synchronized</code> 关键字与锁优化</li><li>[ ] <code>volatile</code> 关键字与 Java 内存模型 (JMM)</li><li>[ ] <code>java.util.concurrent</code> (JUC) 包 <ul><li>[ ] <code>Lock</code> 接口 (<code>ReentrantLock</code>, <code>ReadWriteLock</code>)</li><li>[ ] 原子类 (<code>AtomicInteger</code>, <code>LongAdder</code>)</li><li>[ ] 线程池 (<code>ThreadPoolExecutor</code> 核心参数与原理)</li><li>[ ] 并发工具类 (<code>CountDownLatch</code>, <code>CyclicBarrier</code>, <code>Semaphore</code>)</li></ul></li><li>[ ] <code>ThreadLocal</code></li><li>[ ] <code>CompletableFuture</code> 与异步编程</li></ul><h3 id="_2-2-jvm-java-virtual-machine" tabindex="-1">2.2 JVM (Java Virtual Machine) <a class="header-anchor" href="#_2-2-jvm-java-virtual-machine" aria-label="Permalink to &quot;2.2 JVM (Java Virtual Machine)&quot;">​</a></h3><ul><li>[ ] JVM 内存结构 (堆, 栈, 方法区, 程序计数器)</li><li>[ ] Java 对象创建与内存分配</li><li>[ ] 垃圾回收 (GC) <ul><li>[ ] 判断对象存活 (引用计数法, 可达性分析)</li><li>[ ] GC 算法 (标记-清除, 标记-复制, 标记-整理)</li><li>[ ] 主流垃圾收集器 (Serial, Parallel, CMS, G1, ZGC)</li></ul></li><li>[ ] 类加载机制 (加载, 链接, 初始化)与双亲委派模型</li><li>[ ] JVM 性能调优与故障排查工具 (<code>jps</code>, <code>jstat</code>, <code>jmap</code>, <code>jstack</code>)</li></ul><h3 id="_2-3-java-新特性" tabindex="-1">2.3 Java 新特性 <a class="header-anchor" href="#_2-3-java-新特性" aria-label="Permalink to &quot;2.3 Java 新特性&quot;">​</a></h3><ul><li>[ ] Java 8: Lambda 表达式, Stream API, <code>Optional</code>, 新日期时间 API</li><li>[ ] Java 11: <code>var</code> 局部变量类型推断, 新 <code>String</code> API</li><li>[ ] Java 17: Records, Sealed Classes, <code>switch</code> 表达式增强</li><li>[ ] Java 21: 虚拟线程, 结构化并发, Record Patterns</li></ul>',25)]))}const _=a(c,[["render",d]]);export{v as __pageData,_ as default};
