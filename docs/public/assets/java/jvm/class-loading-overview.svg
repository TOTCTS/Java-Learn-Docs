<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 750 900" font-family="Arial, sans-serif" font-size="14">
    <defs>
        <!-- 协调的渐变色系统 -->
        <linearGradient id="grad-loading-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#FFDDC1;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#FFC3A0;stop-opacity:1" />
        </linearGradient>
        <linearGradient id="grad-linking-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#D4F1F4;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#A9D3E0;stop-opacity:1" />
        </linearGradient>
        <linearGradient id="grad-init-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#F3E8FF;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#E9D5FF;stop-opacity:1" />
        </linearGradient>
        <linearGradient id="grad-sub-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#E8F0FE;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#D2E3FC;stop-opacity:1" />
        </linearGradient>
        <style>
            .bg-v2 { fill: #FEFEFE; }
            .area-bg-v2 { fill: rgba(255, 248, 225, 0.4); stroke: #F0B27A; stroke-width: 1.5; rx: 10; ry: 10; }
            .area-title-v2 { font-size: 20px; font-weight: bold; text-anchor: middle; fill: #1F2937; }
            .step-box-v2 { stroke: #374151; stroke-width: 1.5; rx: 8; ry: 8; }
            .step-text-v2 { font-size: 16px; font-weight: 600; text-anchor: middle; fill: #1F2937; }
            .step-desc-v2 { font-size: 13px; text-anchor: middle; fill: #4B5563; }

            .linking-panel-v2 { stroke: #6B7280; stroke-width: 1.5; rx: 12; ry: 12; stroke-dasharray: 4 4; }
            .linking-title-v2 { font-size: 18px; font-weight: 600; fill: #1F2937; text-anchor: middle; }

            .sub-step-box-v2 { fill: rgba(255,255,255,0.6); stroke: #9CA3AF; stroke-width: 1; rx: 4; ry: 4; }
            .sub-step-text-v2 { font-size: 14px; font-weight: 500; text-anchor: middle; fill: #374151; }
            
            .key-point-v2 { font-size: 13px; text-anchor: start; fill: #4B5563; }
            .delayed-text-v2 { font-size: 12px; text-anchor: middle; fill: #4B5563; }

            .connector-v2 { fill: none; stroke: #6B7280; stroke-width: 2; marker-end: url(#arrowhead-v2); }
            .connector-dashed-v2 { fill: none; stroke: #9CA3AF; stroke-width: 2; stroke-dasharray: 5 5; marker-end: url(#arrowhead-v2); }
        </style>
        <marker id="arrowhead-v2" viewBox="0 0 10 10" refX="8" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#6B7280" />
        </marker>
    </defs>

    <rect x="0" y="0" width="750" height="900" class="bg-v2"/>
    
    <!-- 主分区 -->
    <rect x="10" y="20" width="730" height="860" class="area-bg-v2"/>
    <text x="375" y="55" class="area-title-v2">Java 类加载全过程</text>

    <!-- 主流程容器，居中于 x=375 -->
    <g transform="translate(375, 90)">
        <!-- 加载阶段 -->
        <g transform="translate(0, 50)">
            <rect x="-200" y="0" width="400" height="80" class="step-box-v2" fill="url(#grad-loading-v2)"/>
            <text x="0" y="25" class="step-text-v2">1. 加载 (Loading)</text>
            <text x="0" y="48" class="step-desc-v2">获取.class字节流, 转为方法区运行时结构</text>
            <text x="0" y="66" class="step-desc-v2">并在堆中创建该类的Class对象</text>
        </g>
        <path d="M 0 130 v 30" class="connector-v2"/>
        
        <!-- 链接阶段 -->
        <g transform="translate(0, 160)">
            <rect x="-280" y="0" width="560" height="380" class="linking-panel-v2" fill="url(#grad-linking-v2)"/>
            <text x="0" y="35" class="linking-title-v2">2. 链接 (Linking)</text>
            
            <rect x="-250" y="60" width="500" height="300" fill="rgba(255,255,255,0.3)" stroke="#A9D3E0" stroke-width="1" rx="8" stroke-dasharray="3 3"/>
            
            <g transform="translate(0, 90)">
                <rect x="-200" y="0" width="400" height="60" class="sub-step-box-v2"/>
                <text x="0" y="25" class="sub-step-text-v2">2.1 验证 (Verification)</text>
                <text x="0" y="45" class="step-desc-v2">确保字节码文件符合JVM规范</text>
            </g>
            <path d="M 0 150 v 35" class="connector-v2"/>
            
            <g transform="translate(0, 185)">
                <rect x="-200" y="0" width="400" height="60" class="sub-step-box-v2"/>
                <text x="0" y="25" class="sub-step-text-v2">2.2 准备 (Preparation)</text>
                <text x="0" y="45" class="step-desc-v2">为类变量分配内存并设置零值</text>
            </g>
            <path d="M 0 245 v 35" class="connector-v2"/>

            <g transform="translate(0, 280)">
                <rect x="-200" y="0" width="400" height="60" class="sub-step-box-v2"/>
                <text x="0" y="25" class="sub-step-text-v2">2.3 解析 (Resolution)</text>
                <text x="0" y="45" class="step-desc-v2">将符号引用替换为直接引用</text>
            </g>
        </g>
        
        <!-- 连接线: 链接 -> 初始化 (修正) -->
        <path d="M 0 540 v 30" class="connector-v2" />
        
        <!-- 初始化阶段 (修正) -->
        <g transform="translate(0, 570)">
            <rect x="-200" y="0" width="400" height="70" class="step-box-v2" fill="url(#grad-init-v2)"/>
            <text x="0" y="25" class="step-text-v2">3. 初始化 (Initialization)</text>
            <text x="0" y="48" class="step-desc-v2">执行类构造器 &lt;clinit&gt;() 方法</text>
        </g>
    </g>
    
    <!-- 延迟解析说明 (修正, 移到边界内) -->
    <g transform="translate(575, 525)">
        <path d="M 0 35 h 20" class="connector-dashed-v2"/>
        <g transform="translate(20, 10)">
            <rect x="0" y="0" width="140" height="50" fill="rgba(255,255,255,0.9)" stroke="#B0BEC5" stroke-width="1" rx="5"/>
            <text x="70" y="20" class="delayed-text-v2">此步骤可选</text>
            <text x="70" y="38" class="delayed-text-v2">可延迟至首次使用前</text>
        </g>
    </g>

    <!-- 关键要点 (修正, 避免重叠) -->
    <g transform="translate(125, 750)">
        <rect x="0" y="0" width="500" height="120" fill="rgba(225, 245, 254, 0.3)" stroke="#76D7C4" stroke-width="1" rx="8"/>
        <text x="250" y="25" class="linking-title-v2">关键要点</text>
        
        <text x="25" y="50" class="key-point-v2" >• <tspan font-weight="bold">加载:</tspan> JVM外部动作, 获取类的二进制流, 创建Class对象。</text>
        <text x="25" y="68" class="key-point-v2" >• <tspan font-weight="bold">链接:</tspan> 内部核心过程, 包含验证、准备、解析三个子阶段。</text>
        <text x="25" y="86" class="key-point-v2" >• <tspan font-weight="bold">初始化:</tspan> 真正开始执行类中定义的Java代码 (&lt;clinit&gt;方法)。</text>
        <text x="25" y="104" class="key-point-v2" >• <tspan font-weight="bold">线程安全:</tspan> JVM保证一个类的&lt;clinit&gt;()在多线程中被正确加锁同步。</text>
    </g>
</svg> 