<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 600 920" font-family="Arial, sans-serif" font-size="14">
    <defs>
        <!-- 协调的渐变色系统 -->
        <linearGradient id="grad-step-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#D4F1F4;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#A9D3E0;stop-opacity:1" />
        </linearGradient>
        <linearGradient id="grad-tlab-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#E8F0FE;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#D2E3FC;stop-opacity:1" />
        </linearGradient>
        <linearGradient id="grad-cas-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#FFDDC1;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#FFC3A0;stop-opacity:1" />
        </linearGradient>
        <linearGradient id="grad-init-v2" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" style="stop-color:#F3E8FF;stop-opacity:1" />
            <stop offset="100%" style="stop-color:#E9D5FF;stop-opacity:1" />
        </linearGradient>
        <style>
            .bg-v2 { fill: #FEFEFE; }
            .area-bg-v2 { fill: rgba(255, 248, 225, 0.4); stroke: #F0B27A; stroke-width: 1.5; rx: 10; ry: 10; }
            .area-title-v2 { font-size: 20px; font-weight: bold; text-anchor: middle; fill: #1F2937; }
            .step-box-v2 { stroke: #374151; stroke-width: 1.5; rx: 8; ry: 8; }
            .step-text-v2 { font-size: 16px; font-weight: 600; text-anchor: middle; fill: #1F2937; }
            .step-desc-v2 { font-size: 13px; text-anchor: middle; fill: #4B5563; }

            .sub-panel-v2 { fill: rgba(225, 245, 254, 0.4); stroke: #76D7C4; stroke-width: 1.5; rx: 10; ry: 10; }
            .sub-panel-title-v2 { font-size: 16px; font-weight: 600; fill: #1F2937; text-anchor: middle; }
            .sub-box-v2 { stroke-width: 1.2; rx: 6; ry: 6; }
            .tlab-box-v2 { stroke: #6B7280; }
            .cas-box-v2 { stroke: #6B7280; }
            .sub-text-v2 { font-size: 14px; text-anchor: middle; font-weight: 500; fill: #1F2937; }
            .sub-label-v2 { font-size: 12px; text-anchor: middle; fill: #4B5563; }
            .key-point-v2 { font-size: 13px; text-anchor: start; fill: #4B5563; } /* New style for left-aligned text */
            
            .connector-v2 { fill: none; stroke: #6B7280; stroke-width: 2; marker-end: url(#arrowhead-v2); }
            .connector-dashed-v2 { fill: none; stroke: #9CA3AF; stroke-width: 2; stroke-dasharray: 5 5; marker-end: url(#arrowhead-v2); }
        </style>
        <marker id="arrowhead-v2" viewBox="0 0 10 10" refX="8" refY="5" markerWidth="6" markerHeight="6" orient="auto-start-reverse">
            <path d="M 0 0 L 10 5 L 0 10 z" fill="#6B7280" />
        </marker>
    </defs>

    <rect x="0" y="0" width="600" height="920" class="bg-v2"/>
    
    <!-- 主分区 -->
    <rect x="20" y="20" width="560" height="880" class="area-bg-v2"/>
    <text x="300" y="55" class="area-title-v2">Java 对象创建流程</text>

    <g transform="translate(300, 90)">
        <!-- 1. 类加载检查 -->
        <g>
            <rect x="-180" y="0" width="360" height="70" class="step-box-v2" fill="url(#grad-step-v2)"/>
            <text x="0" y="30" class="step-text-v2">1. 类加载检查</text>
            <text x="0" y="55" class="step-desc-v2">检查类是否已加载、链接、初始化</text>
        </g>
        <path d="M 0 70 v 20" class="connector-v2"/>
        
        <!-- 2. 内存分配 -->
        <g>
            <rect x="-180" y="90" width="360" height="70" class="step-box-v2" fill="url(#grad-step-v2)"/>
            <text x="0" y="115" class="step-text-v2">2. 内存分配</text>
            <text x="0" y="140" class="step-desc-v2">在堆中为新对象分配内存空间</text>
        </g>
        <path d="M 0 160 v 20" class="connector-v2"/>
        
        <!-- 并发处理方案 -->
        <g transform="translate(0, 180)">
            <rect x="-270" y="0" width="540" height="200" class="sub-panel-v2"/>
            <text x="0" y="30" class="sub-panel-title-v2">内存分配的并发安全策略</text>
            
            <!-- 内部说明区域 -->
            <rect x="-255" y="50" width="510" height="130" fill="rgba(255,255,255,0.3)" stroke="#A9D3E0" stroke-width="1" rx="8" stroke-dasharray="3 3"/>
            
            <!-- TLAB 分配 -->
            <g transform="translate(-135, 110)">
                <rect x="-95" y="-40" width="190" height="90" class="sub-box-v2 tlab-box-v2" fill="url(#grad-tlab-v2)"/>
                <text y="-15" class="sub-text-v2">优先：TLAB 分配</text>
                <text y="10" class="sub-label-v2">在线程本地分配缓冲区中创建</text>
                <text y="25" class="sub-label-v2">(Thread Local Allocation Buffer)</text>
                <text y="40" class="sub-label-v2" fill="#059669" font-weight="bold">无锁，高效</text>
            </g>
            
            <!-- CAS + 失败重试 -->
            <g transform="translate(135, 110)">
                <rect x="-95" y="-40" width="190" height="90" class="sub-box-v2 cas-box-v2" fill="url(#grad-cas-v2)"/>
                <text y="-15" class="sub-text-v2">失败后：CAS + 重试</text>
                <text y="10" class="sub-label-v2">在整个堆中进行分配</text>
                <text y="25" class="sub-label-v2">(Compare-And-Swap)</text>
                <text y="40" class="sub-label-v2" fill="#C2410C" font-weight="bold">有竞争，同步开销</text>
            </g>
            
            <!-- 或选择 -->
            <g transform="translate(0, 110)">
                <circle cx="0" cy="0" r="18" fill="#FFF" stroke="#6B7280" stroke-width="1.5"/>
                <text class="sub-text-v2" font-weight="bold" fill="#374151">或</text>
            </g>
        </g>
        <path d="M 0 380 v 20" class="connector-v2"/>

        <!-- 3. 零值初始化 -->
        <g>
            <rect x="-180" y="400" width="360" height="70" class="step-box-v2" fill="url(#grad-step-v2)"/>
            <text x="0" y="425" class="step-text-v2">3. 内存空间初始化为零值</text>
            <text x="0" y="450" class="step-desc-v2">保证对象字段不赋初值即可访问</text>
        </g>
        <path d="M 0 470 v 20" class="connector-v2"/>

        <!-- 4. 对象头设置 -->
        <g>
            <rect x="-180" y="490" width="360" height="70" class="step-box-v2" fill="url(#grad-step-v2)"/>
            <text x="0" y="515" class="step-text-v2">4. 设置对象头 (Object Header)</text>
            <text x="0" y="535" class="step-desc-v2">存储哈希码、GC信息、锁状态、</text>
            <text x="0" y="550" class="step-desc-v2">以及指向类元数据的指针</text>
        </g>
        <path d="M 0 560 v 20" class="connector-v2"/>

        <!-- 5. 执行构造方法 -->
        <g>
            <rect x="-180" y="580" width="360" height="70" class="step-box-v2" fill="url(#grad-init-v2)"/>
            <text x="0" y="605" class="step-text-v2">5. 执行 &lt;init&gt;() 构造方法</text>
            <text x="0" y="630" class="step-desc-v2">按程序员意图对对象进行初始化</text>
        </g>
    </g>

    <!-- 关键要点 -->
    <g transform="translate(50, 750)">
        <rect x="0" y="0" width="500" height="140" fill="rgba(248, 245, 255, 0.4)" stroke="#B19CD9" stroke-width="1" rx="8"/>
        <text x="250" y="25" class="sub-panel-title-v2">关键要点</text>
        
        <text y="52" class="key-point-v2">
            <tspan x="25" dy="0">• <tspan font-weight="bold">TLAB</tspan> (Thread Local Allocation Buffer) 是JVM内存分配优化的核心手段，</tspan>
            <tspan x="35" dy="1.2em">避免多线程竞争。</tspan>
        </text>
        
        <text y="82" class="key-point-v2">
            <tspan x="25" dy="0">• <tspan font-weight="bold">CAS</tspan> (Compare And Swap) 是TLAB分配失败后的备选方案，用于处理</tspan>
            <tspan x="35" dy="1.2em">堆上直接分配的同步问题。</tspan>
        </text>

        <text y="112" class="key-point-v2">
             <tspan x="25" dy="0">• <tspan font-weight="bold">零值初始化</tspan>先于构造方法执行，是Java对象实例化机制的</tspan>
             <tspan x="35" dy="1.2em">重要一环。</tspan>
        </text>
    </g>
</svg> 